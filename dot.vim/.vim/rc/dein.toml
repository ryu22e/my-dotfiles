[[plugins]]
repo = 'vim-scripts/git-commit'
hook_add = 'let git_diff_spawn_mode = 1'

[[plugins]]
repo = 'vim-scripts/quickrun.vim'
hook_add = '''
  let g:quickrun_config = {}
  let g:quickrun_config.typescript = {'command' : 'ts-node'}
'''

[[plugins]]
repo = 'vim-scripts/Gist.vim'

[[plugins]]
repo = 'vim-scripts/matchit.zip'
hook_add = '''
  runtime macros/matchit.vim 
  let b:match_words = &matchpairs . "\<if\>:\<end if\>,\<if\>:\<endif\>" 
  let b:match_ignorecase = 1 
'''

[[plugins]]
repo = 'vim-scripts/speeddating.vim'

[[plugins]]
repo = 'vim-scripts/abolish.vim'

[[plugins]]
repo = 'vim-scripts/Justify'
hook_add = 'runtime macros/justify.vim'

[[plugins]]
repo = 'Rykka/clickable.vim' 

[[plugins]]
repo = 'Rykka/clickable-things' 

[[plugins]]
repo = 'Rykka/os.vim' 

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
gui = 1

[[plugins]]
repo = 'ynkdir/vim-funlib'
hook_add = '''
  function! Random(a, b)
      return random#randint(a:a, a:b)
  endfunction
  function! MD5(data)
      return hashlib#md5(a:data)
  endfunction
  function! Sha1(data)
      return hashlib#sha1(a:data)
  endfunction
  function! Sha256(data)
      return hashlib#sha1(a:data)
  endfunction
'''

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
  let b:surround_{char2nr("v")} = "{{ \r }}"
  let b:surround_{char2nr("{")} = "{{ \r }}"
  let b:surround_{char2nr("%")} = "{% \r %}"
  let b:surround_{char2nr("b")} = "{% block \1block name: \1 %}\r{% endblock \1\1 %}"
  let b:surround_{char2nr("i")} = "{% if \1condition: \1 %}\r{% endif %}"
  let b:surround_{char2nr("w")} = "{% with \1with: \1 %}\r{% endwith %}"
  let b:surround_{char2nr("f")} = "{% for \1for loop: \1 %}\r{% endfor %}"
  let b:surround_{char2nr("c")} = "{% comment %}\r{% endcomment %}"
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tsukkee/unite-tag'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'taku-o/vim-toggle'

[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  let g:syntastic_python_checkers = ['flake8']
  let g:syntastic_python_flake8_args = '--max-line-length=160'
  let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
  let g:syntastic_rst_checkers = ['rstcheck']
  let g:syntastic_go_checkers = ['golint', 'govet', 'go']
  let g:go_list_type = "quickfix"
  let g:syntastic_typescript_checkers = ['tslint', 'tsc']
  let g:syntastic_rust_checkers = ['rustc']
'''

[[plugins]]
repo = 'honza/vim-snippets'
gui = 1

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'justinmk/vim-dirvish'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
