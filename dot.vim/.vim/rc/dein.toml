[[plugins]]
repo = 'vim-scripts/git-commit'
hook_add = 'let git_diff_spawn_mode = 1'

[[plugins]]
repo = 'vim-scripts/quickrun.vim'
hook_add = '''
  let g:quickrun_config = {}
  let g:quickrun_config.typescript = {'command' : 'ts-node'}
'''

[[plugins]]
repo = 'vim-scripts/Gist.vim'

[[plugins]]
repo = 'vim-scripts/matchit.zip'
hook_add = '''
  runtime macros/matchit.vim
  let b:match_words = &matchpairs . "\<if\>:\<end if\>,\<if\>:\<endif\>"
  let b:match_ignorecase = 1
'''

[[plugins]]
repo = 'vim-scripts/speeddating.vim'

[[plugins]]
repo = 'vim-scripts/abolish.vim'

[[plugins]]
repo = 'vim-scripts/Justify'
hook_add = 'runtime macros/justify.vim'

[[plugins]]
repo = 'Rykka/clickable.vim'

[[plugins]]
repo = 'Rykka/clickable-things'

[[plugins]]
repo = 'Rykka/os.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
gui = 1

[[plugins]]
repo = 'maximbaz/lightline-ale'
gui = 1
depends = ['itchyny/lightline.vim', 'dense-analysis/ale']
hook_add = '''
let g:lightline = {}

let g:lightline.component_expand = {
  \  'linter_checking': 'lightline#ale#checking',
  \  'linter_infos': 'lightline#ale#infos',
  \  'linter_warnings': 'lightline#ale#warnings',
  \  'linter_errors': 'lightline#ale#errors',
  \  'linter_ok': 'lightline#ale#ok',
  \ }
let g:lightline.component_type = {
  \     'linter_checking': 'right',
  \     'linter_infos': 'right',
  \     'linter_warnings': 'warning',
  \     'linter_errors': 'error',
  \     'linter_ok': 'right',
  \ }
let g:lightline.active = {
  \ 'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
  \            [ 'lineinfo' ],
  \            [ 'percent' ],
  \            [ 'fileformat', 'fileencoding', 'filetype'] ] }
'''

[[plugins]]
repo = 'ynkdir/vim-funlib'
hook_add = '''
  function! Random(a, b)
      return random#randint(a:a, a:b)
  endfunction
  function! MD5(data)
      return hashlib#md5(a:data)
  endfunction
  function! Sha1(data)
      return hashlib#sha1(a:data)
  endfunction
  function! Sha256(data)
      return hashlib#sha1(a:data)
  endfunction
'''

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
  let b:surround_{char2nr("v")} = "{{ \r }}"
  let b:surround_{char2nr("{")} = "{{ \r }}"
  let b:surround_{char2nr("%")} = "{% \r %}"
  let b:surround_{char2nr("b")} = "{% block \1block name: \1 %}\r{% endblock \1\1 %}"
  let b:surround_{char2nr("i")} = "{% if \1condition: \1 %}\r{% endif %}"
  let b:surround_{char2nr("w")} = "{% with \1with: \1 %}\r{% endwith %}"
  let b:surround_{char2nr("f")} = "{% for \1for loop: \1 %}\r{% endfor %}"
  let b:surround_{char2nr("c")} = "{% comment %}\r{% endcomment %}"
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tsukkee/unite-tag'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'taku-o/vim-toggle'

[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'dense-analysis/ale'
rev = 'v3.3.0'
hook_add = '''
  " Basic ALE configuration settings
  let g:ale_linters_explicit = 1  " Only use linters explicitly specified in the configuration
  let g:ale_fix_on_save = 1       " Automatically fix problems on file save if possible
  let g:ale_sign_column_always = 1  " Always show the sign column
  let g:ale_completion_enabled = 1  " Enable ALE's completion

  let g:ale_linters = {
  \   'python': ['flake8'],
  \   'php': ['php', 'phpcs', 'phpmd'],
  \   'go': ['golint', 'govet', 'staticcheck'],
  \   'typescript': ['tslint', 'tsc'],
  \   'rust': ['cargo'],
  \}
  let g:ale_python_flake8_executable = 'flake8'
  let s:flake8_config_path = expand($VIM_FLAKE8_CONFIG_PATH)
  if filereadable(s:flake8_config_path)
    let g:ale_python_flake8_options = '--config=' . s:flake8_config_path
  endif
'''

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'justinmk/vim-dirvish'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
rev = '1.0'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'simeji/winresizer'
rev = 'v1.1.1'
