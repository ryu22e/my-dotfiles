[[plugins]]
repo = 'vim-scripts/smartchr'
on_i = 1
hook_add = '''
  autocmd FileType coffee,c,cpp,ruby,perl,python,php,javascript inoremap <buffer> <expr> = smartchr#loop(' = ', '=', ' == ')
  autocmd FileType php,javascript,typescript inoremap <buffer> <expr> = smartchr#loop(' = ', '=', ' == ', ' === ')
  autocmd FileType coffee,c,cpp,ruby,perl,python,php,javascript,typescript inoremap <expr> : smartchr#loop(':', ': ', '=>')
  autocmd FileType coffee,c,cpp,ruby,perl,python,php,javascript,typescript inoremap <expr> , smartchr#loop(', ', ',')
  autocmd FileType ctp inoremap <buffer> <expr> = smartchr#loop('=', ' = ', ' == ', ' === ')
  autocmd FileType ctp inoremap <expr> : smartchr#loop(':', ': ', '=>')
  autocmd FileType ctp inoremap <expr> , smartchr#loop(', ', ',')
  autocmd FileType c,cpp inoremap <buffer> <expr> . smartchr#loop('.', '->', '...')
  autocmd FileType php inoremap <buffer> <expr> . smartchr#loop('.', '->')
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
if = '''has("nvim") && has("python3")'''
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
depends = ['deoplete.nvim']

[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''!has("nvim") && has("python3")'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has("nvim") && has("python3")'''

[[plugins]]
repo = 'Shougo/unite.vim'
if = '''!has("nvim")'''
on_cmd = ['Unite']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'htmldjango', 'smarty']

[[plugins]]
repo = 'osyo-manga/vim-over'
on_cmd = ['OverCommandLine']

[[plugins]]
repo = 'gu-fan/riv.vim'
on_ft = ['rst']

[[plugins]]
repo = 'tell-k/vim-autopep8'
if = '''executable('autopep8')'''
on_ft = ['python']
on_cmd = ['Autopep8']
hook_add = '''
  let g:autopep8_disable_show_diff = 1
'''

[[plugins]]
repo = 'vim-scripts/django.vim'
on_ft = ['python']

[[plugins]]
repo = 'jmcomets/vim-pony'
on_ft = ['python', 'htmldjango']
on_cmd = ['Dadmin', 'Dmodels', 'Dsettings', 'Dtests', 'Durls', 'Dviews', 'Drunserver', 'Dr', 'Dsyncdb', 'Dsy', 'Dshell', 'Dsh', 'Ddbshell']

[[plugins]]
repo = 'python-mode/python-mode'
on_ft = ['python']
rev = 'develop'
hook_add = '''
  let g:pymode_python = 'python3'
  let g:pymode_rope = 1
  let g:pymode_rope_rename_bind = '<C-c>rr'
'''

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

[[plugins]]
repo = 'arp242/gopher.vim'
on_ft = ['go', 'gohtmltmpl']
hook_add = '''
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
if = '''!has("nvim") && has('python')'''
hook_add = '''
  autocmd FileType python setlocal omnifunc=jedi#completions
  let g:jedi#auto_vim_configuration = 0
  if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*' " enable quickrun let g:jedi#rename_command = "" let g:jedi#pydoc = ""
'''

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python']
if = '''executable('virtualenv')'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = ['ansible']

[[plugins]]
repo = 'elixir-lang/vim-elixir'
on_ft = ['elixir']

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = ['jinja']

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
if = '''has('python')'''

[[plugins]]
repo = 'mileszs/ack.vim'
if = '''executable('ack')'''
on_cmd = ['Ack', 'AckAdd', 'AckFromSearch', 'LAck', 'LAckAdd', 'AckFile', 'AckHelp', 'AckWindow', 'LAckWindow']

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
on_ft = ['php']
if = '''executable('php-cs-fixer')'''
hook_add = '''
    auto BufWritePre *.php call PhpCsFixerFixFile()
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
if = '''executable('tsc')'''

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform']
hook_add = '''
  let g:terraform_fmt_on_save = 1
'''

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = ['terraform']

[[plugins]]
repo = 'SirVer/ultisnips'
gui = 1
on_i = 1
hook_add = '''
  " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
  let g:UltiSnipsExpandTrigger='<tab>'
  let g:UltiSnipsJumpForwardTrigger='<c-j>'
  let g:UltiSnipsJumpBackwardTrigger='<c-p>'
  let g:UltiSnipsListSnippets='<c-k>'
  " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit='vertical'
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
  let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_add = '''
  autocmd BufRead,BufNewFile *.vue setlocal filetype=vue
'''
