[[plugins]]
repo = 'vim-scripts/smartchr'
on_i = 1
hook_add = '''
  autocmd FileType coffee,c,cpp,ruby,perl,python,php,javascript inoremap <buffer> <expr> = smartchr#loop(' = ', '=', ' == ')
  autocmd FileType php,javascript,typescript inoremap <buffer> <expr> = smartchr#loop(' = ', '=', ' == ', ' === ')
  autocmd FileType coffee,c,cpp,ruby,perl,python,php,javascript,typescript inoremap <expr> : smartchr#loop(':', ': ', '=>')
  autocmd FileType coffee,c,cpp,ruby,perl,python,php,javascript,typescript inoremap <expr> , smartchr#loop(', ', ',')
  autocmd FileType ctp inoremap <buffer> <expr> = smartchr#loop('=', ' = ', ' == ', ' === ')
  autocmd FileType ctp inoremap <expr> : smartchr#loop(':', ': ', '=>')
  autocmd FileType ctp inoremap <expr> , smartchr#loop(', ', ',')
  autocmd FileType c,cpp inoremap <buffer> <expr> . smartchr#loop('.', '->', '...')
  autocmd FileType php inoremap <buffer> <expr> . smartchr#loop('.', '->')
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
if = '''has("nvim") && has("python3")'''
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
if = '''has("nvim")'''
depends = ['deoplete.nvim']
on_cmd = ['LanguageClientStart']
rev = 'next'
build = 'bash install.sh'
hook_add = '''
set hidden
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rls'],
    \ }
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_i = 1
if = '''has("nvim") && has("python3")'''
depends = ['deoplete.nvim']
on_ft = ['python']

[[plugins]]
repo = 'zchee/deoplete-go'
on_i = 1
if = '''has("nvim") && has("python3")'''
depends = ['deoplete.nvim']
op_ft = ['go']
build = 'make'

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_i = 1
if = '''has("nvim") && executable("npm")'''
depends = ['deoplete.nvim']
op_ft = ['javascript']
build = 'npm install -g tern'
hook_add = '''
" Set bin if you have many instalations
let g:deoplete#sources#ternjs#tern_bin = '/usr/local/bin/tern'
let g:deoplete#sources#ternjs#timeout = 1

" Whether to include the types of the completions in the result data. Default: 0
let g:deoplete#sources#ternjs#types = 1

" Whether to include the distance (in scopes for variables, in prototypes for
" properties) between the completions and the origin position in the result
" data. Default: 0
let g:deoplete#sources#ternjs#depths = 1

" Whether to include documentation strings (if found) in the result data.
" Default: 0
let g:deoplete#sources#ternjs#docs = 1

" When on, only completions that match the current word at the given point will
" be returned. Turn this off to get all results, so that you can filter on the
" client side. Default: 1
let g:deoplete#sources#ternjs#filter = 0

" Whether to use a case-insensitive compare between the current word and
" potential completions. Default 0
let g:deoplete#sources#ternjs#case_insensitive = 1

" When completing a property and no completions are found, Tern will use some
" heuristics to try and return some properties anyway. Set this to 0 to
" turn that off. Default: 1
let g:deoplete#sources#ternjs#guess = 0

" Determines whether the result set will be sorted. Default: 1
let g:deoplete#sources#ternjs#sort = 0

" When disabled, only the text before the given position is considered part of
" the word. When enabled (the default), the whole variable name that the cursor
" is on will be included. Default: 1
let g:deoplete#sources#ternjs#expand_word_forward = 0

" Whether to ignore the properties of Object.prototype unless they have been
" spelled out by at least two characters. Default: 1
let g:deoplete#sources#ternjs#omit_object_prototype = 0

" Whether to include JavaScript keywords when completing something that is not
" a property. Default: 0
let g:deoplete#sources#ternjs#include_keywords = 1

" If completions should be returned when inside a literal. Default: 1
let g:deoplete#sources#ternjs#in_literal = 0
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''!has("nvim") && has("python3")'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has("nvim") && has("python3")'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
depends = ['vimproc.vim']
if = '''!has("nvim") && has("lua")'''
hook_add = '''
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'scheme' : $HOME.'/.gosh_completions'
          \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  " Close popup by <Space>.
  "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

  " AutoComplPop like behavior.
  "let g:neocomplete#enable_auto_select = 1

  " Shell like behavior(not recommended).
  "set completeopt+=longest
  "let g:neocomplete#enable_auto_select = 1
  "let g:neocomplete#disable_auto_complete = 1
  "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
if = '''!has("nvim")'''
on_cmd = ['Unite']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'htmldjango', 'smarty']

[[plugins]]
repo = 'osyo-manga/vim-over'
on_cmd = ['OverCommandLine']

[[plugins]]
repo = 'gu-fan/riv.vim'
on_ft = ['rst']

[[plugins]]
repo = 'tell-k/vim-autopep8'
if = '''executable('autopep8')'''
on_ft = ['python']
on_cmd = ['Autopep8']
hook_add = '''
  let g:autopep8_disable_show_diff = 1
'''

[[plugins]]
repo = 'vim-scripts/django.vim'
on_ft = ['python']

[[plugins]]
repo = 'jmcomets/vim-pony'
on_ft = ['python', 'htmldjango']
on_cmd = ['Dadmin', 'Dmodels', 'Dsettings', 'Dtests', 'Durls', 'Dviews', 'Drunserver', 'Dr', 'Dsyncdb', 'Dsy', 'Dshell', 'Dsh', 'Ddbshell']

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  auto BufWritePre *.go GoFmt
  au FileType go nmap <leader>b <Plug>(go-build)
  au FileType go nmap <leader>t <Plug>(go-test)
  au FileType go nmap <leader>c <Plug>(go-coverage)
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
if = '''!has("nvim") && has('python')'''
hook_add = '''
  autocmd FileType python setlocal omnifunc=jedi#completions
  let g:jedi#auto_vim_configuration = 0
  if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*' " enable quickrun let g:jedi#rename_command = "" let g:jedi#pydoc = ""
'''

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python']
if = '''executable('virtualenv')'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = ['ansible']

[[plugins]]
repo = 'elixir-lang/vim-elixir'
on_ft = ['elixir']

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = ['jinja']

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
if = '''has('python')'''

[[plugins]]
repo = 'mileszs/ack.vim'
if = '''executable('ack')'''
on_cmd = ['Ack', 'AckAdd', 'AckFromSearch', 'LAck', 'LAckAdd', 'AckFile', 'AckHelp', 'AckWindow', 'LAckWindow']

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
on_ft = ['php']
if = '''executable('php-cs-fixer')'''
hook_add = '''
    auto BufWritePre *.php call PhpCsFixerFixFile()
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
if = '''executable('tsc')'''

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform']
hook_add = '''
  let g:terraform_fmt_on_save = 1
'''

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = ['terraform']

[[plugins]]
repo = 'SirVer/ultisnips'
gui = 1
on_i = 1
hook_add = '''
  " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
  let g:UltiSnipsExpandTrigger='<tab>'
  let g:UltiSnipsJumpForwardTrigger='<c-j>'
  let g:UltiSnipsJumpBackwardTrigger='<c-p>'
  let g:UltiSnipsListSnippets='<c-k>'
  " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit='vertical'
'''

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = ['jinja']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
  let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
on_cmd = ['FixWhitespace']
