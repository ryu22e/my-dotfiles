[[plugins]]
repo = 'vim-scripts/smartchr'
on_i = 1
hook_add = '''
  autocmd FileType coffee,c,cpp,ruby,perl,python,php,javascript inoremap <buffer> <expr> = smartchr#loop(' = ', '=', ' == ')
  autocmd FileType php,javascript,typescript inoremap <buffer> <expr> = smartchr#loop(' = ', '=', ' == ', ' === ')
  autocmd FileType coffee,c,cpp,ruby,perl,python,php,javascript,typescript inoremap <expr> : smartchr#loop(':', ': ', '=>')
  autocmd FileType coffee,c,cpp,ruby,perl,python,php,javascript,typescript inoremap <expr> , smartchr#loop(', ', ',')
  autocmd FileType ctp inoremap <buffer> <expr> = smartchr#loop('=', ' = ', ' == ', ' === ')
  autocmd FileType ctp inoremap <expr> : smartchr#loop(':', ': ', '=>')
  autocmd FileType ctp inoremap <expr> , smartchr#loop(', ', ',')
  autocmd FileType c,cpp inoremap <buffer> <expr> . smartchr#loop('.', '->', '...')
  autocmd FileType php inoremap <buffer> <expr> . smartchr#loop('.', '->')
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
rev = 'v7.0.0'
if = '''executable('deno')'''
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
lua << EOF
  local capabilities = require("ddc_source_lsp").make_client_capabilities()
  require("lspconfig").denols.setup({
    capabilities = capabilities,
  })
EOF

  " You must set the default ui.
  " Note: native ui
  " https://github.com/Shougo/ddc-ui-native
  call ddc#custom#patch_global('ui', 'native')

  " Use around source.
  call ddc#custom#patch_global('sources', ['around', 'lsp'])

  " Change source options
  call ddc#custom#patch_global('sourceOptions', {
        \ 'around': {'mark': 'A'},
        \ 'lsp': {
        \    'mark': 'lsp',
        \    'forceCompletionPattern': '\.\w*|:\w*|->\w*',
        \ },
        \ '_': {
        \   'matchers': ['matcher_head'],
        \   'sorters': ['sorter_rank'],
        \ },
        \ })
  call ddc#custom#patch_global('sourceParams', {
        \ 'around': {'maxSize': 500},
        \ 'lsp': {
        \    'snippetEngine': denops#callback#register({
        \          body -> vsnip#anonymous(body)
        \    }),
        \    'enableResolveItem': v:true,
        \    'enableAdditionalTextEdit': v:true,
        \  },
        \ })

  " Mappings

  " <TAB>: completion.
  inoremap <silent><expr> <TAB>
  \ pumvisible() ? '<C-n>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()

  " <S-TAB>: completion back.
  inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

  call ddc#enable()
'''

[[plugins]]
repo = 'vim-denops/denops.vim'
rev = 'v7.0.2'
if = '''executable('deno')'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
if = '''executable('deno')'''
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-source-around'
if = '''executable('deno')'''
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
if = '''executable('deno')'''
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
if = '''executable('deno')'''
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
if = '''executable('deno')'''
on_source = ['ddc.vim']

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source= '''
lua << EOF
vim.keymap.set('n', 'K',  '<cmd>lua vim.lsp.buf.hover()<CR>')
vim.keymap.set('n', 'gf', '<cmd>lua vim.lsp.buf.formatting()<CR>')
vim.keymap.set('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>')
vim.keymap.set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>')
vim.keymap.set('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>')
vim.keymap.set('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>')
vim.keymap.set('n', 'gn', '<cmd>lua vim.lsp.buf.rename()<CR>')
vim.keymap.set('n', 'ga', '<cmd>lua vim.lsp.buf.code_action()<CR>')
vim.keymap.set('n', 'ge', '<cmd>lua vim.diagnostic.open_float()<CR>')
vim.keymap.set('n', 'g]', '<cmd>lua vim.diagnostic.goto_next()<CR>')
vim.keymap.set('n', 'g[', '<cmd>lua vim.diagnostic.goto_prev()<CR>')

 require("mason").setup()
 require("mason-lspconfig").setup()
 require("mason-lspconfig").setup_handlers {
   function(server_name) -- default handler (optional)
     require("lspconfig")[server_name].setup {
       on_attach = on_attach,
     }
   end
 }
EOF
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'htmldjango', 'smarty']

[[plugins]]
repo = 'gu-fan/riv.vim'
on_ft = ['rst']

[[plugins]]
repo = 'vim-scripts/django.vim'
on_ft = ['python']

[[plugins]]
repo = 'jmcomets/vim-pony'
on_ft = ['python', 'htmldjango']
on_cmd = ['Dadmin', 'Dmodels', 'Dsettings', 'Dtests', 'Durls', 'Dviews', 'Drunserver', 'Dr', 'Dsyncdb', 'Dsy', 'Dshell', 'Dsh', 'Ddbshell']

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

[[plugins]]
repo = 'arp242/gopher.vim'
on_ft = ['go', 'gohtmltmpl']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = ['ansible']

[[plugins]]
repo = 'elixir-lang/vim-elixir'
on_ft = ['elixir']

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = ['jinja']

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
if = '''has('python')'''

[[plugins]]
repo = 'mileszs/ack.vim'
if = '''executable('ack')'''
on_cmd = ['Ack', 'AckAdd', 'AckFromSearch', 'LAck', 'LAckAdd', 'AckFile', 'AckHelp', 'AckWindow', 'LAckWindow']

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
on_ft = ['php']
if = '''executable('php-cs-fixer')'''
hook_add = '''
    auto BufWritePre *.php call PhpCsFixerFixFile()
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
if = '''executable('tsc')'''

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform']
hook_add = '''
  let g:terraform_fmt_on_save = 1
'''

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = ['terraform']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
  let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_add = '''
  autocmd BufRead,BufNewFile *.vue setlocal filetype=vue
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_cmd = ['IndentGuidesEnable', 'IndentGuidesDisable', 'IndentGuidesToggle']

[[plugins]]
repo = 'Shougo/ddu.vim'
rev = 'v3.10.3'
if = '''executable('deno')'''
depends = ['denops.vim']
hook_add = '''
  call ddu#custom#patch_global({
      \ 'ui': 'ff',
      \ })

  "ddu-key-setting
  autocmd FileType ddu-ff call s:ddu_my_settings()
  function! s:ddu_my_settings() abort
    nnoremap <buffer><silent> <CR>
          \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> <Space>
          \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
    nnoremap <buffer><silent> i
          \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
    nnoremap <buffer><silent> q
          \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

  autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
  function! s:ddu_filter_my_settings() abort
    nnoremap <buffer> <CR>
    \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> q
    \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
    inoremap <buffer> <CR>
    \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    inoremap <buffer> <C-j>
    \ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')+1,0)")<CR>
    inoremap <buffer> <C-k>
    \ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')-1,0)")<CR>
  endfunction

  "ddu keymapping.
  nnoremap <SID>[ug] <Nop>
  nmap ,u <SID>[ug]

  nnoremap <silent> <SID>[ug]m :<C-u>Ddu mr<CR>
  nnoremap <silent> <SID>[ug]b :<C-u>Ddu buffer<CR>
  nnoremap <silent> <SID>[ug]r :<C-u>Ddu register<CR>
  nnoremap <silent> <SID>[ug]n :<C-u>Ddu file -source-param-new -volatile<CR>
  nnoremap <silent> <SID>[ug]f :<C-u>Ddu file<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
if = '''executable('deno')'''
on_source = ['ddu.vim']
